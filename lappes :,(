import tkinter as tk
from tkinter import messagebox
import json
import os
import time
from cryptography.fernet import Fernet
from PIL import Image, ImageTk

DATA_FILE = "kasutaja_andmed.json"  # Kaust kuhu kõik andmed salvestuvad, kasutajanimi, parool, ülesanded ja puu progress
KEY_FILE = "salajane_voti.key"  # Koodil enda salajane võtmekene millega kaust dekrüpteerida
IMAGE_PATH = "puu.png"

initial_size = (100, 100)  # Puu suurus alguses

def loo_voti():
    if not os.path.exists(KEY_FILE):
        key = Fernet.generate_key()
        with open(KEY_FILE, "wb") as key_file:
            key_file.write(key)

def laadi_voti(): 
    with open(KEY_FILE, "rb") as key_file:
        return key_file.read()

def krupteeri_andmed(plain_data, key):  # Krüpteerib andmed
    fernet = Fernet(key)
    encrypted_data = fernet.encrypt(plain_data.encode())
    return encrypted_data

def dekrupteeri_andmed(encrypted_data, key):  # Dekrüpteerib andmed
    fernet = Fernet(key)
    decrypted_data = fernet.decrypt(encrypted_data).decode()
    return decrypted_data

class ToDoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Logi sisse")
        self.root.geometry("800x600")
        self.root.configure(bg='#e68cad')  # Taustavärv

        loo_voti()
        self.key = laadi_voti()

        self.user_data = {}
        self.kasutajanimi = None
        self.active_task = None
        self.timer_running = False
        self.start_time = 0

        self.init_login_window()

    def init_login_window(self):  # Sisselogimise aken
        self.login_frame = tk.Frame(self.root, bg='#f5cedc', padx=20, pady=20, borderwidth=5, relief=tk.RAISED)
        self.login_frame.pack(pady=200)

        tk.Label(self.login_frame, text="Kasutajanimi:", bg='#f5cedc', font=('Helvetica', 14)).grid(row=0, column=0, sticky=tk.W)
        tk.Label(self.login_frame, text="Parool:", bg='#f5cedc', font=('Helvetica', 14)).grid(row=1, column=0, sticky=tk.W)

        self.kasutajanimi_entry = tk.Entry(self.login_frame, font=('Helvetica', 14), bg='white')
        self.kasutajanimi_entry.grid(row=0, column=1, pady=5)
        self.salasõna_entry = tk.Entry(self.login_frame, show="*", font=('Helvetica', 14), bg='white')
        self.salasõna_entry.grid(row=1, column=1, pady=5)

        button_frame = tk.Frame(self.login_frame, bg='#f48fb1')
        button_frame.grid(row=2, column=0, columnspan=2, pady=10)

        button_color = '#f06292'  # Hele roosa nuppude jaoks
        
        login_button = tk.Button(button_frame, text="LOGI SISSE", command=self.login, bg=button_color, font=('Helvetica', 14), relief='raised', bd=3)
        login_button.pack(side=tk.LEFT, padx=10, pady=5, fill=tk.X)

        signup_button = tk.Button(button_frame, text="REGISTREERI", command=self.signup, bg=button_color, font=('Helvetica', 14), relief='raised', bd=3)
        signup_button.pack(side=tk.LEFT, padx=10, pady=5, fill=tk.X)

        if os.path.exists(DATA_FILE):  # Kasutajaandmete laadimine, kui konto on olemas
            with open(DATA_FILE, "rb") as file:
                encrypted_data = file.read()
                decrypted_data = dekrupteeri_andmed(encrypted_data, self.key)
                self.user_data = json.loads(decrypted_data)

    def signup(self):  # Uue kasutaja loomine
        kasutajanimi = self.kasutajanimi_entry.get() 
        salasõna = self.salasõna_entry.get()

        if kasutajanimi in self.user_data:
            messagebox.showerror("Viga", "Kasutajanimi on juba olemas!")
        else:
            self.user_data[kasutajanimi] = {"salasõna": salasõna, "tasks": [], "branches": 0}
            self.save_user_data()
            messagebox.showinfo("Edu", "Konto loodud! Palun logi sisse.")

    def login(self):  # Sisse logimine
        kasutajanimi = self.kasutajanimi_entry.get()
        salasõna = self.salasõna_entry.get()

        if kasutajanimi in self.user_data and self.user_data[kasutajanimi]["salasõna"] == salasõna:
            self.kasutajanimi = kasutajanimi
            self.login_frame.pack_forget()
            self.init_todo_window()
        else:
            messagebox.showerror("Viga", "Vale kasutajanimi või parool!")

    def logout(self):  # Välja logimine
        self.todo_frame.pack_forget()
        self.tree_canvas.pack_forget()
        self.login_frame.pack(pady=20)
        self.timer_running = False

    def init_todo_window(self):  # Peamine aken
        self.todo_frame = tk.Frame(self.root, bg='#fce4ec', padx=10, pady=10)
        self.todo_frame.pack(pady=10)

        self.task_listbox = tk.Listbox(self.todo_frame, height=10, width=40, font=('Helvetica', 14), bg='white')
        self.task_listbox.grid(row=0, column=0, columnspan=3)

        self.load_tasks()

        self.task_entry = tk.Entry(self.todo_frame, width=30, font=('Helvetica', 14), bg='white')
        self.task_entry.grid(row=1, column=0)
        tk.Button(self.todo_frame, text="LISA", command=self.add_task, bg='#f06292', font=('Helvetica', 14)).grid(row=1, column=1)

        tk.Button(self.todo_frame, text="Kustuta ülesanne", command=self.complete_task, bg='#f06292', font=('Helvetica', 14)).grid(row=2, column=0, columnspan=3, pady=10)

        tk.Button(self.todo_frame, text="Alusta", command=self.start_timer, bg='#f06292', font=('Helvetica', 14)).grid(row=3, column=0)
        tk.Button(self.todo_frame, text="Lõpeta", command=self.finish_task, bg='#f06292', font=('Helvetica', 14)).grid(row=3, column=1)
        tk.Button(self.todo_frame, text="Peata", command=self.stop_timer, bg='#f06292', font=('Helvetica', 14)).grid(row=3, column=2)

        self.timer_label = tk.Label(self.todo_frame, text="00:00", bg='#fce4ec', font=('Helvetica', 18))
        self.timer_label.grid(row=4, column=0, columnspan=3)

        tk.Button(self.todo_frame, text="Logi välja", command=self.logout, bg='#f06292', font=('Helvetica', 14)).grid(row=5, column=0, columnspan=3)

        self.tree_canvas = tk.Label(self.root, bg='#e68cad')  # Puu
        self.tree_canvas.pack(side=tk.BOTTOM)
        self.image = Image.open(IMAGE_PATH)
        self.image = self.image.resize(initial_size)
        self.photo = ImageTk.PhotoImage(self.image)
        self.tree_canvas.config(image=self.photo)

        self.grow_image()  # Puu kasvab

    def add_task(self):  # Uue ülesande lisamine
        task = self.task_entry.get() 
        if task:
            self.task_listbox.insert(tk.END, task)
            self.user_data[self.kasutajanimi]["tasks"].append(task)
            self.save_user_data()
            self.task_entry.delete(0, tk.END)

    def complete_task(self):  # Märgib ülesande tehtuks ja kustutab ära
        selected_task = self.task_listbox.curselection()
        if selected_task:
            task_index = selected_task[0]
            self.task_listbox.delete(task_index)
            del self.user_data[self.kasutajanimi]["tasks"][task_index]
            self.grow_branch()  # Teeb pilti suuremaks iga kord kui ülesanne tehtud saab
            self.save_user_data()
        else:
            messagebox.showwarning("Hoiatus", "Vali ülesanne, mida teha!")

    def start_timer(self):  # Taimeri käivitamine, kui ülesannet on alustatud
        if not self.timer_running:
            selected_task = self.task_listbox.curselection()
            if selected_task:
                self.active_task = selected_task[0]
                self.timer_running = True
                self.start_time = time.time()
                self.update_timer()

    def stop_timer(self):  # Taimeri peatamine, kui ülesanne on lõpetatud
        self.timer_running = False

    def finish_task(self):  # Lisab oksa ja peatab timeri kui ülesanne on tehtud
        if self.timer_running:
            self.stop_timer()
            self.complete_task()  

    def update_timer(self):  # Timeri uuendab
        if self.timer_running:
            elapsed_time = int(time.time() - self.start_time)
            minutes = elapsed_time // 60
            seconds = elapsed_time % 60
            self.timer_label.config(text=f"{minutes:02}:{seconds:02}")

            if self.timer_running:
                self.root.after(1000, self.update_timer)

    def grow_branch(self):  # Kasvatab oksa (tegelikult teeb lisapilti suuremaks)
        if self.user_data[self.kasutajanimi]["branches"] < 12:  # Saab max 12 korda kasvada, muidu liiga suur
            self.user_data[self.kasutajanimi]["branches"] += 1
            self.grow_image()  

    def grow_image(self):  # Muudab pilti suuremaks
        new_size = (int(self.image.size[0] * 1.10), int(self.image.size[1] * 1.10))
        self.image = self.image.resize(new_size)
        self.photo = ImageTk.PhotoImage(self.image)
        self.tree_canvas.config(image=self.photo)

    def save_user_data(self):  # Andmete salvestamine krüpteeritult
        with open(DATA_FILE, "wb") as file:
            encrypted_data = krupteeri_andmed(json.dumps(self.user_data), self.key)
            file.write(encrypted_data)

    def load_tasks(self):  # Laeb salvestatud ülesanded kaustast
        tasks = self.user_data[self.kasutajanimi]["tasks"]
        for task in tasks:
            self.task_listbox.insert(tk.END, task)

if __name__ == "__main__":
    root = tk.Tk()
    app = ToDoApp(root)
    root.mainloop()

